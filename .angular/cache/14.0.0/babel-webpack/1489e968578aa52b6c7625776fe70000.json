{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from \"sweetalert2\";\nlet RegisterUserComponent = class RegisterUserComponent {\n  constructor(dialogRef, api, formBuilder, apiService, router) {\n    this.dialogRef = dialogRef;\n    this.api = api;\n    this.formBuilder = formBuilder;\n    this.apiService = apiService;\n    this.router = router;\n    this.submitted = false;\n  }\n\n  ngOnInit() {\n    this.api.getUser().subscribe(user => __awaiter(this, void 0, void 0, function* () {\n      this.user = user;\n      this.signUpForm = this.formBuilder.group({\n        tracao: ['', Validators.compose([Validators.required, Validators.minLength(7), Validators.maxLength(7)])],\n        email: ['', Validators.compose([Validators.required, Validators.minLength(6), Validators.maxLength(40), Validators.email])],\n        senha: ['', Validators.compose([Validators.required, Validators.minLength(6), Validators.maxLength(15)])],\n        passwordCheck: ['', Validators.compose([Validators.required, Validators.minLength(6), Validators.maxLength(15)])],\n        telefone: ['', Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(15)])],\n        cpf: ['', Validators.compose([Validators.required, Validators.minLength(11), Validators.maxLength(11)])],\n        name: ['', Validators.compose([Validators.required, Validators.minLength(6), Validators.maxLength(40)])]\n      });\n      console.log(this.user.cnpjtransportadora);\n    }));\n  }\n\n  get formFields() {\n    return this.signUpForm.controls;\n  }\n\n  onSubmit() {\n    if (this.signUpForm.invalid && this.signUpForm.value.senha !== this.signUpForm.value.passwordCheck) {\n      Swal.fire('O formulário está inválido');\n      return;\n    }\n\n    this.submitted = true;\n    const informedFrota = {\n      tracao: this.formFields.tracao.value,\n      nome: this.formFields.nome.value,\n      telefone: this.formFields.telefone.value,\n      cpf: this.formFields.cpf.value,\n      email: this.formFields.email.value,\n      senha: this.formFields.senha.value,\n      passwordCheck: this.formFields.passwordCheck\n    };\n\n    try {\n      this.apiService.login(informedFrota).subscribe(user => __awaiter(this, void 0, void 0, function* () {\n        if (user['error']) {\n          Swal.fire(user['msg']);\n          this.submitted = false;\n        } else {\n          yield this.apiService.setTokenToHeader(user);\n          yield window.location.reload();\n        }\n      }));\n    } catch (error) {\n      Swal.fire(error);\n    }\n  }\n\n  closeModal() {\n    this.dialogRef.close();\n  }\n\n};\nRegisterUserComponent = __decorate([Component({\n  selector: 'app-register-user',\n  templateUrl: './register-user.component.html',\n  styleUrls: ['./register-user.component.scss']\n})], RegisterUserComponent);\nexport { RegisterUserComponent };","map":null,"metadata":{},"sourceType":"module"}